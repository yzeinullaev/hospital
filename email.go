package main

import (
	"fmt"
	"time"

	"gopkg.in/gomail.v2"
)

type EmailService struct {
	fromEmail    string
	fromPassword string
	toEmail      string
	smtpHost     string
	smtpPort     int
}

func NewEmailService() *EmailService {
	return &EmailService{
		fromEmail:    getEnv("EMAIL_FROM", ""),
		fromPassword: getEnv("EMAIL_PASSWORD", ""),
		toEmail:      getEnv("EMAIL_TO", ""),
		smtpHost:     getEnv("SMTP_HOST", "smtp.gmail.com"),
		smtpPort:     getEnvAsInt("SMTP_PORT", 587),
	}
}

func (e *EmailService) SendFeedbackEmail(feedback *Feedback) error {
	if e.fromEmail == "" || e.fromPassword == "" || e.toEmail == "" {
		return fmt.Errorf("email configuration is incomplete")
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ feedback.CreatedAt
	currentTime := time.Now()

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
	subject := fmt.Sprintf("–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: %s", getTypeDisplayName(feedback.Type))

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
	body := fmt.Sprintf(`üè• –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:
‚Ä¢ –ò–º—è: %s %s
‚Ä¢ Username: @%s
‚Ä¢ ID: %d

üìù –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: %s
üìÖ –î–∞—Ç–∞: %s

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
%s

---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –±–æ–ª—å–Ω–∏—Ü—ã.`,
		feedback.FirstName,
		feedback.LastName,
		feedback.Username,
		feedback.UserID,
		getTypeDisplayName(feedback.Type),
		currentTime.Format("02.01.2006 15:04:05"),
		feedback.Message,
	)

	m := gomail.NewMessage()
	m.SetHeader("From", e.fromEmail)
	m.SetHeader("To", e.toEmail)
	m.SetHeader("Subject", subject)
	m.SetBody("text/plain", body)

	d := gomail.NewDialer(e.smtpHost, e.smtpPort, e.fromEmail, e.fromPassword)

	if err := d.DialAndSend(m); err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}

	return nil
}
