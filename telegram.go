package main

import (
	"context"
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

type TelegramBot struct {
	bot      *tgbotapi.BotAPI
	database *Database
	email    *EmailService
	logger   *logrus.Logger
	ctx      context.Context
	cancel   context.CancelFunc
}

type UserState struct {
	UserID   int64
	State    string
	Data     map[string]string
	LastSeen time.Time
}

var userStates = make(map[int64]*UserState)

func NewTelegramBot(db *Database, email *EmailService, logger *logrus.Logger) (*TelegramBot, error) {
	token := getEnv("TELEGRAM_BOT_TOKEN", "")
	if token == "" {
		return nil, fmt.Errorf("TELEGRAM_BOT_TOKEN is required")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	ctx, cancel := context.WithCancel(context.Background())

	return &TelegramBot{
		bot:      bot,
		database: db,
		email:    email,
		logger:   logger,
		ctx:      ctx,
		cancel:   cancel,
	}, nil
}

func (t *TelegramBot) Start() error {
	t.logger.Info("Starting Telegram bot...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := t.bot.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			go t.handleUpdate(update)
		case <-t.ctx.Done():
			return nil
		}
	}
}

func (t *TelegramBot) Stop() error {
	t.cancel()
	return nil
}

func (t *TelegramBot) handleUpdate(update tgbotapi.Update) {
	if update.Message == nil && update.CallbackQuery == nil {
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
	if update.CallbackQuery != nil {
		t.handleCallbackQuery(update.CallbackQuery)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	message := update.Message
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	state, exists := userStates[userID]
	if !exists {
		state = &UserState{
			UserID: userID,
			State:  "start",
			Data:   make(map[string]string),
		}
		userStates[userID] = state
	}

	state.LastSeen = time.Now()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		t.handleCommand(message, state)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch state.State {
	case "start":
		t.handleStart(message, state)
	case "waiting_for_type":
		t.handleTypeSelection(message, state)
	case "waiting_for_message":
		t.handleMessageInput(message, state)
	default:
		t.sendMessageWithMenu(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
	}
}

func (t *TelegramBot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state, exists := userStates[userID]
	if !exists {
		state = &UserState{
			UserID: userID,
			State:  "start",
			Data:   make(map[string]string),
		}
		userStates[userID] = state
	}

	state.LastSeen = time.Now()

	switch callback.Data {
	case "complaint":
		state.Data["type"] = "complaint"
		state.State = "waiting_for_message"
		t.sendMessage(callback.Message.Chat.ID, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –ø–æ–¥—Ä–æ–±–Ω–æ. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.")
	case "review":
		state.Data["type"] = "review"
		state.State = "waiting_for_message"
		t.sendMessage(callback.Message.Chat.ID, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ–ª—å–Ω–∏—Ü—ã.")
	case "help":
		t.sendHelp(callback.Message.Chat.ID)
	case "stats":
		t.handleStats(callback.Message.Chat.ID)
	case "main_menu":
		t.sendMainMenu(callback.Message.Chat.ID)
	default:
		t.logger.Warnf("Unknown callback data: %s", callback.Data)
	}
}

func (t *TelegramBot) handleCommand(message *tgbotapi.Message, state *UserState) {
	switch message.Command() {
	case "start":
		t.handleStart(message, state)
	case "help":
		t.sendHelp(message.Chat.ID)
	case "stats":
		t.handleStats(message.Chat.ID)
	case "menu":
		t.sendMainMenu(message.Chat.ID)
	default:
		t.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
	}
}

func (t *TelegramBot) handleStart(message *tgbotapi.Message, state *UserState) {
	state.State = "waiting_for_type"
	state.Data = make(map[string]string)

	text := `üè• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –±–æ–ª—å–Ω–∏—Ü—ã!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:`

	t.sendMessageWithTypeButtons(message.Chat.ID, text)
}

func (t *TelegramBot) handleTypeSelection(message *tgbotapi.Message, state *UserState) {
	text := strings.ToLower(strings.TrimSpace(message.Text))

	var feedbackType string
	switch text {
	case "1", "–∂–∞–ª–æ–±–∞", "complaint":
		feedbackType = "complaint"
		state.Data["type"] = feedbackType
		state.State = "waiting_for_message"
		t.sendMessage(message.Chat.ID, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –ø–æ–¥—Ä–æ–±–Ω–æ. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.")
	case "2", "–æ—Ç–∑—ã–≤", "review":
		feedbackType = "review"
		state.Data["type"] = feedbackType
		state.State = "waiting_for_message"
		t.sendMessage(message.Chat.ID, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ–ª—å–Ω–∏—Ü—ã.")
	default:
		t.sendMessageWithTypeButtons(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:")
	}
}

func (t *TelegramBot) handleMessageInput(message *tgbotapi.Message, state *UserState) {
	feedbackType := state.Data["type"]

	feedback := &Feedback{
		UserID:    message.From.ID,
		Username:  message.From.UserName,
		FirstName: message.From.FirstName,
		LastName:  message.From.LastName,
		Message:   message.Text,
		Type:      feedbackType,
		Status:    "new",
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
	if message.Photo != nil && len(message.Photo) > 0 {
		// –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ) —Ñ–æ—Ç–æ
		photo := message.Photo[len(message.Photo)-1]
		mediaFile := MediaFile{
			FileID:   photo.FileID,
			FileType: "photo",
			FileSize: int64(photo.FileSize),
		}
		feedback.MediaFiles = append(feedback.MediaFiles, mediaFile)
	} else if message.Video != nil {
		mediaFile := MediaFile{
			FileID:   message.Video.FileID,
			FileType: "video",
			FileName: message.Video.FileName,
			FileSize: int64(message.Video.FileSize),
			MimeType: message.Video.MimeType,
		}
		feedback.MediaFiles = append(feedback.MediaFiles, mediaFile)
	} else if message.Document != nil {
		mediaFile := MediaFile{
			FileID:   message.Document.FileID,
			FileType: "document",
			FileName: message.Document.FileName,
			FileSize: int64(message.Document.FileSize),
			MimeType: message.Document.MimeType,
		}
		feedback.MediaFiles = append(feedback.MediaFiles, mediaFile)
	} else if message.Audio != nil {
		mediaFile := MediaFile{
			FileID:   message.Audio.FileID,
			FileType: "audio",
			FileName: message.Audio.FileName,
			FileSize: int64(message.Audio.FileSize),
			MimeType: message.Audio.MimeType,
		}
		feedback.MediaFiles = append(feedback.MediaFiles, mediaFile)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := t.database.SaveFeedback(feedback); err != nil {
		t.logger.Error("Failed to save feedback: ", err)
		t.sendMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email
	go func() {
		if err := t.email.SendFeedbackEmail(feedback); err != nil {
			t.logger.Error("Failed to send email: ", err)
		}
	}()

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
	t.database.UpdateFeedbackStatus(feedback.ID, "sent")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	responseText := "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
	if feedbackType == "complaint" {
		responseText += "\n\n–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∂–∞–ª–æ–±—É –∏ –ø—Ä–∏–º–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã."
	} else {
		responseText += "\n\n–í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å!"
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
	if len(feedback.MediaFiles) > 0 {
		responseText += fmt.Sprintf("\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d", len(feedback.MediaFiles))
	}

	responseText += "\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ?"

	t.sendMessageWithMainMenu(message.Chat.ID, responseText)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state.State = "start"
	state.Data = make(map[string]string)
}

func (t *TelegramBot) sendMessageWithTypeButtons(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ñ–∞–ª–æ–±–∞", "complaint"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê –û—Ç–∑—ã–≤", "review"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	msg.ReplyMarkup = keyboard

	if _, err := t.bot.Send(msg); err != nil {
		t.logger.Error("Failed to send message with buttons: ", err)
	}
}

func (t *TelegramBot) sendMessageWithMainMenu(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè• –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "main_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	msg.ReplyMarkup = keyboard

	if _, err := t.bot.Send(msg); err != nil {
		t.logger.Error("Failed to send message with main menu: ", err)
	}
}

func (t *TelegramBot) sendMainMenu(chatID int64) {
	text := `üè• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –±–æ–ª—å–Ω–∏—Ü—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", "complaint"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "review"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	msg.ReplyMarkup = keyboard

	if _, err := t.bot.Send(msg); err != nil {
		t.logger.Error("Failed to send main menu: ", err)
	}
}

func (t *TelegramBot) sendHelp(chatID int64) {
	helpText := `ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìù <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>
‚Ä¢ –ñ–∞–ª–æ–±–∞ - –¥–ª—è –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –∫ –∫–∞—á–µ—Å—Ç–≤—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ –û—Ç–∑—ã–≤ - –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è
2. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚úÖ –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.`

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ParseMode = "HTML"

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	msg.ReplyMarkup = keyboard

	if _, err := t.bot.Send(msg); err != nil {
		t.logger.Error("Failed to send help: ", err)
	}
}

func (t *TelegramBot) handleStats(chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	adminUserID := getEnv("ADMIN_USER_ID", "")
	if adminUserID == "" || fmt.Sprintf("%d", chatID) != adminUserID {
		t.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		return
	}

	stats, err := t.database.GetFeedbackStats()
	if err != nil {
		t.logger.Error("Failed to get stats: ", err)
		t.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		return
	}

	statsText := "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n\n"
	statsText += fmt.Sprintf("üìù –ñ–∞–ª–æ–±—ã: %d\n", stats["complaint"])
	statsText += fmt.Sprintf("‚≠ê –û—Ç–∑—ã–≤—ã: %d\n", stats["review"])
	statsText += fmt.Sprintf("üìà –í—Å–µ–≥–æ: %d", stats["complaint"]+stats["review"])

	msg := tgbotapi.NewMessage(chatID, statsText)
	msg.ParseMode = "HTML"

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	msg.ReplyMarkup = keyboard

	if _, err := t.bot.Send(msg); err != nil {
		t.logger.Error("Failed to send stats: ", err)
	}
}

func (t *TelegramBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	if _, err := t.bot.Send(msg); err != nil {
		t.logger.Error("Failed to send message: ", err)
	}
}

func (t *TelegramBot) sendMessageWithMenu(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	msg.ReplyMarkup = keyboard

	if _, err := t.bot.Send(msg); err != nil {
		t.logger.Error("Failed to send message with menu: ", err)
	}
}
