package main

import (
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

type UserState struct {
	State string
	Data  map[string]string
}

type TelegramBot struct {
	bot      *tgbotapi.BotAPI
	database *Database
	email    *EmailService
	logger   *logrus.Logger
	users    map[int64]*UserState
}

func NewTelegramBot(database *Database, email *EmailService, logger *logrus.Logger) (*TelegramBot, error) {
	token := getEnv("TELEGRAM_BOT_TOKEN", "")
	if token == "" {
		return nil, fmt.Errorf("TELEGRAM_BOT_TOKEN is not set")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	return &TelegramBot{
		bot:      bot,
		database: database,
		email:    email,
		logger:   logger,
		users:    make(map[int64]*UserState),
	}, nil
}

func (t *TelegramBot) Start() error {
	t.logger.Info("Bot started: @", t.bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := t.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			t.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			t.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (t *TelegramBot) Stop() error {
	return nil
}

func (t *TelegramBot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	state, exists := t.users[userID]
	if !exists {
		state = &UserState{
			State: "start",
			Data:  make(map[string]string),
		}
		t.users[userID] = state
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		t.handleCommand(message, state)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch state.State {
	case "waiting_for_type":
		t.handleTypeSelection(message, state)
	case "waiting_for_message":
		t.handleMessageInput(message, state)
	default:
		t.sendMainMenu(message.Chat.ID, "”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑:")
	}
}

func (t *TelegramBot) handleCommand(message *tgbotapi.Message, state *UserState) {
	switch message.Command() {
	case "start":
		state.State = "start"
		state.Data = make(map[string]string)
		t.sendMainMenu(message.Chat.ID, "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! ”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑:")
	case "menu":
		t.sendMainMenu(message.Chat.ID, "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä:")
	case "stats":
		if t.isAdmin(message.From.ID) {
			t.handleStats(message.Chat.ID)
		} else {
			t.sendMessage(message.Chat.ID, "‚ùå –°—ñ–∑–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞“ì–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –∂–æ“õ")
		}
	default:
		t.sendMainMenu(message.Chat.ID, "–ñ“±–º—ã—Å—Ç—ã –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start –ø”ô—Ä–º–µ–Ω—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑")
	}
}

func (t *TelegramBot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state, exists := t.users[userID]
	if !exists {
		state = &UserState{
			State: "start",
			Data:  make(map[string]string),
		}
		t.users[userID] = state
	}

	data := callback.Data
	switch data {
	case "complaint":
		state.State = "waiting_for_message"
		state.Data["type"] = "complaint"
		t.sendMessage(callback.Message.Chat.ID, "üìù ”®—Ç—ñ–Ω—ñ—à, —à–∞“ì—ã–º—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑. –ë—ñ–∑ –æ–Ω—ã –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω—à–µ “õ—ã—Å“õ–∞ –º–µ—Ä–∑—ñ–º–¥–µ “õ–∞—Ä–∞—Å—Ç—ã—Ä–∞–º—ã–∑.")
	case "review":
		state.State = "waiting_for_message"
		state.Data["type"] = "review"
		t.sendMessage(callback.Message.Chat.ID, "‚≠ê ”®—Ç—ñ–Ω—ñ—à, –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑. –ë—ñ–∑ —Å—ñ–∑–¥—ñ“£ –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–æ“ì–∞—Ä—ã –±–∞“ì–∞–ª–∞–π–º—ã–∑.")
	case "stats":
		if t.isAdmin(userID) {
			t.handleStats(callback.Message.Chat.ID)
		} else {
			t.sendMessage(callback.Message.Chat.ID, "‚ùå–°—ñ–∑–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞“ì–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –∂–æ“õ")
		}
	case "new_request":
		state.State = "start"
		state.Data = make(map[string]string)
		t.sendMainMenu(callback.Message.Chat.ID, "")
	case "help":
		t.sendHelp(callback.Message.Chat.ID)
	case "back_to_menu":
		state.State = "start"
		state.Data = make(map[string]string)
		t.sendMainMenu(callback.Message.Chat.ID, "")
	default:
		t.sendMainMenu(callback.Message.Chat.ID, "")
	}
}

func (t *TelegramBot) handleTypeSelection(message *tgbotapi.Message, state *UserState) {
	text := strings.ToLower(strings.TrimSpace(message.Text))

	switch text {
	case "–∂–∞–ª–æ–±–∞", "complaint":
		state.State = "waiting_for_message"
		state.Data["type"] = "complaint"
		t.sendMessage(message.Chat.ID, "üìù ”®—Ç—ñ–Ω—ñ—à, —à–∞“ì—ã–º—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑. –ë—ñ–∑ –æ–Ω—ã –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω—à–µ “õ—ã—Å“õ–∞ –º–µ—Ä–∑—ñ–º–¥–µ “õ–∞—Ä–∞—Å—Ç—ã—Ä–∞–º—ã–∑.")
	case "–æ—Ç–∑—ã–≤", "review":
		state.State = "waiting_for_message"
		state.Data["type"] = "review"
		t.sendMessage(message.Chat.ID, "‚≠ê ”®—Ç—ñ–Ω—ñ—à, –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑. –ë—ñ–∑ —Å—ñ–∑–¥—ñ“£ –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–æ“ì–∞—Ä—ã –±–∞“ì–∞–ª–∞–π–º—ã–∑.")
	default:
		t.sendMessage(message.Chat.ID, "”®—Ç—ñ–Ω—ñ—à, ‚Äò—à–∞“ì—ã–º‚Äô –Ω–µ–º–µ—Å–µ ‚Äò–ø—ñ–∫—ñ—Ä‚Äô —Ç–∞“£–¥–∞“£—ã–∑")
	}
}

func (t *TelegramBot) handleMessageInput(message *tgbotapi.Message, state *UserState) {
	feedbackType := state.Data["type"]

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
	timezone := getEnv("TIMEZONE", "Asia/Almaty")

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è Asia/Almaty (UTC+5)
	var currentTime time.Time
	if timezone == "Asia/Almaty" {
		// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ UTC+5
		loc := time.FixedZone("Asia/Almaty", 5*60*60) // +5 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
		currentTime = time.Now().In(loc)
	} else {
		// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
		loc, err := time.LoadLocation(timezone)
		if err != nil {
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
			loc = time.UTC
		}
		currentTime = time.Now().In(loc)
	}

	feedback := &Feedback{
		UserID:    message.From.ID,
		Username:  message.From.UserName,
		FirstName: message.From.FirstName,
		LastName:  message.From.LastName,
		Message:   message.Text,
		Type:      feedbackType,
		Status:    "new",
		CreatedAt: currentTime, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := t.database.SaveFeedback(feedback); err != nil {
		t.logger.Error("Failed to save feedback: ", err)
		t.sendMessage(message.Chat.ID, " –°–∞“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
	if err := t.email.SendFeedbackEmail(feedback); err != nil {
		t.logger.Error("Failed to send email: ", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
	responseText := fmt.Sprintf("‚úÖ –°—ñ–∑–¥—ñ“£ %s —Å”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!\n\n–ë—ñ–∑ —Å—ñ–∑–¥—ñ“£ %s “õ–∞—Ä–∞–ø, “õ–∞–∂–µ—Ç—Ç—ñ —à–∞—Ä–∞–ª–∞—Ä–¥—ã “õ–∞–±—ã–ª–¥–∞–π–º—ã–∑.\n\n–¢–∞“ì—ã –±—ñ—Ä ”©—Ç—ñ–Ω—ñ—à –∂—ñ–±–µ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª–µ –º–µ?",
		getTypeDisplayName(feedbackType), getTypeDisplayName(feedbackType))

	t.sendConfirmationMenu(message.Chat.ID, responseText)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state.State = "start"
	state.Data = make(map[string]string)
}

func (t *TelegramBot) sendMainMenu(chatID int64, text string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	isAdmin := t.isAdmin(chatID)

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é
	menuText := "üè• –ê—É—Ä—É—Ö–∞–Ω–∞–Ω—ã“£ –∫–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å –∂“Ø–π–µ—Å—ñ–Ω—ñ“£ –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä—ñ\n\n”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑:"

	var keyboard tgbotapi.InlineKeyboardMarkup

	if isAdmin {
		// –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É", "complaint"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚≠ê –ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É", "review"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùì –ö”©–º–µ–∫", "help"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"),
			),
		)
	} else {
		// –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É", "complaint"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚≠ê –ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É", "review"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùì –ö”©–º–µ–∫", "help"),
			),
		)
	}

	msg := tgbotapi.NewMessage(chatID, menuText)
	msg.ReplyMarkup = keyboard
	t.bot.Send(msg)
}

func (t *TelegramBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	t.bot.Send(msg)
}

func (t *TelegramBot) handleStats(chatID int64) {
	stats, err := t.database.GetFeedbackStats()
	if err != nil {
		t.logger.Error("Failed to get stats: ", err)
		t.sendMessage(chatID, "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã")
		return
	}

	complaints := stats["complaint"]
	reviews := stats["review"]
	total := complaints + reviews

	statsText := fmt.Sprintf("üìä ”®—Ç—ñ–Ω—ñ—à—Ç–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã\n\n"+
		"üìù –ñ–∞–ª–æ–±—ã: %d\n"+
		"‚≠ê –û—Ç–∑—ã–≤—ã: %d\n"+
		"üìà –í—Å–µ–≥–æ: %d", complaints, reviews, total)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", "back_to_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, statsText)
	msg.ReplyMarkup = keyboard
	t.bot.Send(msg)
}

func (t *TelegramBot) sendConfirmationMenu(chatID int64, text string) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè• –ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à", "new_request"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ö”©–º–µ–∫", "help"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	t.bot.Send(msg)
}

func (t *TelegramBot) sendHelp(chatID int64) {
	helpText := `‚ÑπÔ∏è –ö”©–º–µ–∫

üìù –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω:
1. "üìù –®–∞“ì—ã–º –∂—ñ–±–µ—Ä—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —à–µ—Ä—Ç—ñ“£—ñ–∑
2. –®–∞“ì—ã–º—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑
3. –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑

‚≠ê –ü—ñ–∫—ñ—Ä–¥—ñ “õ–∞–ª–∞–π “õ–∞–ª–¥—ã—Ä—É“ì–∞ –±–æ–ª–∞–¥—ã:
1. ‚≠ê –ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É‚Äù –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑
2. –ü—ñ–∫—ñ—Ä—ñ“£—ñ–∑–¥—ñ —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑
3. –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑

üìß –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ–ª—ñ–∫–∫–µ email –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ..

üîô –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É “Ø—à—ñ–Ω /start –Ω–µ–º–µ—Å–µ /menu –ø”ô—Ä–º–µ–Ω—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑`

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä", "back_to_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ReplyMarkup = keyboard
	t.bot.Send(msg)
}

func getTypeDisplayName(feedbackType string) string {
	switch feedbackType {
	case "complaint":
		return "—à–∞“ì—ã–º –∂—ñ–±–µ—Ä—É"
	case "review":
		return "–ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É"
	default:
		return feedbackType
	}
}

func (t *TelegramBot) isAdmin(userID int64) bool {
	adminID := getEnvAsInt("ADMIN_USER_ID", 0)
	return userID == int64(adminID)
}
