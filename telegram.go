package main

import (
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

type UserState struct {
	State string
	Data  map[string]string
}

type TelegramBot struct {
	bot      *tgbotapi.BotAPI
	database *Database
	email    *EmailService
	logger   *logrus.Logger
	users    map[int64]*UserState
}

func NewTelegramBot(database *Database, email *EmailService, logger *logrus.Logger) (*TelegramBot, error) {
	token := getEnv("TELEGRAM_BOT_TOKEN", "")
	if token == "" {
		return nil, fmt.Errorf("TELEGRAM_BOT_TOKEN is not set")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	return &TelegramBot{
		bot:      bot,
		database: database,
		email:    email,
		logger:   logger,
		users:    make(map[int64]*UserState),
	}, nil
}

func (t *TelegramBot) Start() error {
	t.logger.Info("Bot started: @", t.bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := t.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			t.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			t.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (t *TelegramBot) Stop() error {
	return nil
}

func (t *TelegramBot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	state, exists := t.users[userID]
	if !exists {
		state = &UserState{
			State: "start",
			Data:  make(map[string]string),
		}
		t.users[userID] = state
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		t.handleCommand(message, state)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch state.State {
	case "waiting_for_type":
		t.handleTypeSelection(message, state)
	case "waiting_for_message":
		t.handleMessageInput(message, state)
	default:
		t.sendMainMenu(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	}
}

func (t *TelegramBot) handleCommand(message *tgbotapi.Message, state *UserState) {
	switch message.Command() {
	case "start":
		state.State = "start"
		state.Data = make(map[string]string)
		t.sendMainMenu(message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	case "menu":
		t.sendMainMenu(message.Chat.ID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
	default:
		t.sendMainMenu(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
	}
}

func (t *TelegramBot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state, exists := t.users[userID]
	if !exists {
		state = &UserState{
			State: "start",
			Data:  make(map[string]string),
		}
		t.users[userID] = state
	}

	data := callback.Data
	switch data {
	case "complaint":
		state.State = "waiting_for_message"
		state.Data["type"] = "complaint"
		t.sendMessage(callback.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:")
	case "review":
		state.State = "waiting_for_message"
		state.Data["type"] = "review"
		t.sendMessage(callback.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
	default:
		t.sendMainMenu(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	}
}

func (t *TelegramBot) handleTypeSelection(message *tgbotapi.Message, state *UserState) {
	text := strings.ToLower(strings.TrimSpace(message.Text))

	switch text {
	case "–∂–∞–ª–æ–±–∞", "complaint":
		state.State = "waiting_for_message"
		state.Data["type"] = "complaint"
		t.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:")
	case "–æ—Ç–∑—ã–≤", "review":
		state.State = "waiting_for_message"
		state.Data["type"] = "review"
		t.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
	default:
		t.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–∂–∞–ª–æ–±–∞' –∏–ª–∏ '–æ—Ç–∑—ã–≤'")
	}
}

func (t *TelegramBot) handleMessageInput(message *tgbotapi.Message, state *UserState) {
	feedbackType := state.Data["type"]

	feedback := &Feedback{
		UserID:    message.From.ID,
		Username:  message.From.UserName,
		FirstName: message.From.FirstName,
		LastName:  message.From.LastName,
		Message:   message.Text,
		Type:      feedbackType,
		Status:    "new",
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := t.database.SaveFeedback(feedback); err != nil {
		t.logger.Error("Failed to save feedback: ", err)
		t.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
	if err := t.email.SendFeedbackEmail(feedback); err != nil {
		t.logger.Error("Failed to send email: ", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	responseText := fmt.Sprintf("‚úÖ –í–∞—à %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–¢–µ–∫—Å—Ç: %s",
		getTypeDisplayName(feedbackType), message.Text)

	t.sendMessage(message.Chat.ID, responseText)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state.State = "start"
	state.Data = make(map[string]string)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	t.sendMainMenu(message.Chat.ID, "–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –∏–ª–∏ –∂–∞–ª–æ–±—É?")
}

func (t *TelegramBot) sendMainMenu(chatID int64, text string) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ñ–∞–ª–æ–±–∞", "complaint"),
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê –û—Ç–∑—ã–≤", "review"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	t.bot.Send(msg)
}

func (t *TelegramBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	t.bot.Send(msg)
}

func getTypeDisplayName(feedbackType string) string {
	switch feedbackType {
	case "complaint":
		return "–∂–∞–ª–æ–±–∞"
	case "review":
		return "–æ—Ç–∑—ã–≤"
	default:
		return feedbackType
	}
}
